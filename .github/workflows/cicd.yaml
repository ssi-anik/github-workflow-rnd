name: Github CI/CD R&D
on:
  pull_request:
    # https://stackoverflow.com/a/70767151/2190689
    branches:
      - main
      - dev
      - qa
  push:
    branches:
      # https://stackoverflow.com/a/57903434/2190689
      #- '*'         # matches every branch that doesn't contain a '/'
      #- '*/*'       # matches every branch containing a single '/'
      - '**'        # matches every branch
      #- '!master'   # excludes master
      - main
      - qa
      - dev
    tags:
      - v*
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  VARIABLE_A: 'A @ workflow-level-variable'
  VARIABLE_B: 'B @ workflow-level-variable'
  VARIABLE_C: 'C @ workflow-level-variable'

jobs:
  select_environment:
    runs-on: ubuntu-latest
    outputs:
      ENVIRONMENT: ${{ steps.select_environment.outputs.ENVIRONMENT }}
    steps:
      - name: select environment
        id: select_environment
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo ENVIRONMENT="none" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == 'tag' ]]; then
            echo ENVIRONMENT=production >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == 'main' || "${{ github.ref_name }}" == 'qa' ]]; then
            echo ENVIRONMENT=production >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == 'dev' ]]; then
            echo ENVIRONMENT=dev >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == 'uat' ]]; then
            echo ENVIRONMENT=uat >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == 'feature/feature-branch' ]]; then
            echo ENVIRONMENT=dev >> $GITHUB_OUTPUT
          else
            echo ENVIRONMENT=test >> $GITHUB_OUTPUT
          fi

  build:
    name: Building application - ${{ matrix.environment }}
    env:
      VARIABLE_A: 'A @ job-level-variable'
    environment: ${{ matrix.environment }}
    needs:
      - select_environment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment:
          - ${{ needs.select_environment.outputs.ENVIRONMENT }}
          # - production
    steps:
      - name: Checkout to codebase
        uses: actions/checkout@v4

      - name: Build - ${{ matrix.environment }}
        env:
          VARIABLE_B: 'B @ step-level-variable'
          SECRET_KEY: ${{ secrets.SECRET_APP_KEY }}
          VAR_KEY: ${{ vars.VAR_APP_KEY }}
          SECRETS_FILE_CONTENTS: ${{ secrets.SECRET_DOT_ENV }}
        # run: |
          # Removed from the following script
          # The following works file.
          # https://github.com/ssi-anik/github-workflow-rnd/actions/runs/12763528519/job/35573899578
          # touch .env
          # echo $SECRETS_FILE_CONTENTS > .env
          # cat .env
        run: |
          echo ${{ env.VARIABLE_A }}
          echo ${{ env.VARIABLE_B }}
          echo ${{ env.VARIABLE_C }}
          echo "secret key" ${{ env.SECRET_KEY }}
          echo "var key" ${{ env.VAR_KEY }}
          echo "secret key directly referenced: " ${{ secrets.SECRET_APP_KEY }}
          echo "var key directly referenced: " ${{ vars.VAR_APP_KEY }}

      - name: multiple command
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          username: ${{ secrets.SSH_USERNAME }}
          script: |
            whoami
            ls -al
            ./home/anik/test.sh "hello world! anik"

#      - name: Deploy - ${{ matrix.environment }}
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
#          chmod 600 ~/.ssh/id_ed25519
#          ssh-keyscan ${{ secrets.VM_IP_ADDRESS }} >> ~/.ssh/known_hosts
#          ssh -i ~/.ssh/id_ed25519 ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP_ADDRESS }} 'bash -s' < ./your-script.sh

      #      - name: Print contexts
      #        run: |
      #          node printer.js ${{ toJson(github) }}
      #          node printer.js ${{ toJson(env) }}
      #          node printer.js ${{ toJson(job) }}
      #
      #          node printer.js ${{ toJson(steps) }}
      #          node printer.js ${{ toJson(secrets) }}
      #          node printer.js ${{ toJson(strategy) }}
      #          node printer.js ${{ toJson(matrix) }}
      #          node printer.js ${{ toJson(needs) }}
      #          node printer.js ${{ toJson(inputs) }}

      #      - name: Echo Github ref
      #        run: |
      #          echo "Running for environment: "${{ matrix.environment }}
      #          echo "github.ref: "${{ github.ref }}
      #          echo "github.base_ref: "${{ github.base_ref }} # PR target branch. empty outside pr
      #          echo "github.head_ref: "${{ github.head_ref }} # PR source branch. empty outside pr
      #          echo "github.ref_name: "${{ github.ref_name }} # Either merge request "id/merge" or the branch name outside the PR.
      #          echo "github.event_name: "${{ github.event_name }} # in this scenario ['push', 'pull_request']. "push" even for tags.
      #          # https://docs.github.com/en/rest/using-the-rest-api/github-event-types?apiVersion=2022-11-28#event-payload-object-for-createevent
      #          echo "github.ref_type: "${{ github.ref_type }} # ['branch', 'tag'] in this scenario.


#      - name: Get Ref
#        id: get_ref
#        run: echo REF="${{ github.base_ref || github.ref_name }}" >> $GITHUB_OUTPUT

#      - name: Get environment
#        id: get_environment
#        run: |
#          if [[ "${{ github.ref_type }}" == 'tag' ]]; then
#            echo ENVIRONMENT=production >> $GITHUB_OUTPUT
#          elif [[ "${{ github.ref_name }}" == 'main' || "${{ github.ref_name }}" == 'qa' ]]; then
#            echo ENVIRONMENT=production >> $GITHUB_OUTPUT
#          elif [[ "${{ github.ref_name }}" == 'dev' ]]; then
#            echo ENVIRONMENT=develop >> $GITHUB_OUTPUT
#          elif [[ "${{ github.ref_name }}" == 'uat' ]]; then
#            echo ENVIRONMENT=uat >> $GITHUB_OUTPUT
#          else
#            echo ENVIRONMENT=test >> $GITHUB_OUTPUT
#          fi
#

#      - name: Print ref
#        run: echo ${{ steps.get_ref.outputs.REF }}

#      - name: Print environment
#        run: echo ${{ steps.get_environment.outputs.ENVIRONMENT }}

#      - name: Deployment
#        if: ${{ github.event_name }} != 'pull_request'
#        run: echo "This should be executed if not pull request"
#
#
#      - name: Check
#        run: |
#          ./printer.sh "hello"
#        env:
#          APP_MIN_HEIGHT: ${{ secrets.APP_MIN_HEIGHT }}
#          APP_MIN_WIDTH: ${{ secrets.APP_MIN_WIDTH }}
#          APP_TITLE: ${{ secrets.APP_TITLE }}
#          BASE_URL_FOR_REMOTE_HOST: ${{ secrets.BASE_URL_FOR_REMOTE_HOST }}
#          REACT_APP_APP_TITLE: ${{ secrets.REACT_APP_APP_TITLE }}
#          REACT_APP_BUG_REPORT_URL: ${{ secrets.REACT_APP_BUG_REPORT_URL }}
#          REACT_APP_COUNTER_API_TAG: ${{ secrets.REACT_APP_COUNTER_API_TAG }}
#          REACT_APP_ENABLE_LOG: ${{ secrets.REACT_APP_ENABLE_LOG }}
#          REACT_APP_PING_SERVER_TIMEOUT: ${{ secrets.REACT_APP_PING_SERVER_TIMEOUT }}
#          REACT_APP_RELEASE_ASSET_URL: ${{ secrets.REACT_APP_RELEASE_ASSET_URL }}
#          REACT_APP_SETTINGS_HOST: ${{ secrets.REACT_APP_SETTINGS_HOST }}
#          REACT_APP_SETTINGS_PATH: ${{ secrets.REACT_APP_SETTINGS_PATH }}
#          REACT_APP_SPLASH_SCREEN_TIMEOUT: ${{ secrets.REACT_APP_SPLASH_SCREEN_TIMEOUT }}
